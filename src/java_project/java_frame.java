/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package java_project;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author root
 */
public class java_frame extends javax.swing.JFrame {

    image im;
    
    //Holds info about drawing mode
    enum Drawing {LINE, CIRCLE, AA, PEN, NONE, SCALING, CLIPPING, FILLING}
    Drawing draw = Drawing.NONE;
    
    //Holds info for line
    boolean line_clicked = false;
    Point line_start, line_end;
    
    //Holds info for circle
    boolean circle_clicked = false;
    Point center;
    
    //Holds info for thick lines
    int thickness = 1;
    
    //Holds if polygon to be clipped was chosen
    boolean chosen = false;
    boolean edge_clicked = false;
    Point rect_start = null;
    Point rect_end = null;
    ArrayList<Point> in_poly = new ArrayList<>();
    boolean drawing_mode = false;
    Point[] edges = new Point[4];

    //Hold info for filling
    ArrayList<Point> fill_poly = new ArrayList<>();
    boolean filling_mode = false;
    
    
    public java_frame() {
        initComponents();
        im = new image();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        scrollPane1 = new java.awt.ScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem25 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java project");
        setBackground(new java.awt.Color(255, 153, 153));
        setForeground(java.awt.Color.pink);

        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Image_clicked(evt);
            }
        });

        jButton1.setText("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open_Click(evt);
            }
        });

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_Click(evt);
            }
        });

        jLabel4.setText("Choose desirable size of custom filter:");

        jButton5.setText("Apply");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Table_size_chooser(evt);
            }
        });

        jLabel7.setText("Enter custom divisor:");

        jLabel8.setText("Enter custom offset:");

        jButton6.setText("Apply custom filter");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Custom_filter(evt);
            }
        });

        jLabel9.setText("Height");

        jLabel10.setText("Width");

        jLabel11.setText("Set center cell:");

        jLabel12.setText("Row number:");

        jLabel13.setText("Column number:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setFillsViewportHeight(true);
        jTable1.setRequestFocusEnabled(false);
        jTable1.setRowHeight(20);
        jScrollPane1.setViewportView(jTable1);

        scrollPane1.add(jScrollPane1);
        jScrollPane1.getAccessibleContext().setAccessibleDescription("");

        jLabel14.setText("Select filter whose kernel do you want to display:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Average (blur) filter", "Gaussian filter", "Sharpening filter", "Emboss filter", "Edge detection" }));

        jButton7.setText("OK");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Display_kernels(evt);
            }
        });

        jLabel5.setText("Configure your convolution filter:");

        jButton3.setText("Clean");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clean(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open_Click(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_Click(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Processing");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Gamma_correction(evt);
            }
        });

        jMenuItem3.setText("Grayscale");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Grayscale(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Negation");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Negation(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Edit contrast");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Contrast(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Edit brightness");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brightness(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem16.setText("Gamma correction");
        jMenu2.add(jMenuItem16);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Filters");

        jMenuItem8.setText("Average filter");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Average_filter(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Gauss filter");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Gauss_filter(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("Sharpenning filter");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sharpenning_filter(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem7.setText("Emboss filter");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Emboss_filter(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem11.setText("Edge detection");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edge_detection(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Thresholding");

        jMenuItem13.setText("Average thresholding");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Average_thresholding(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Random thresholding");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Random_thresholding(evt);
            }
        });
        jMenu4.add(jMenuItem14);

        jMenuItem15.setText("Ordered thresholding");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ordered_thresholding(evt);
            }
        });
        jMenu4.add(jMenuItem15);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Color quantization");

        jMenuItem12.setText("Uniform");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniform_quantization(evt);
            }
        });
        jMenu5.add(jMenuItem12);

        jMenuItem17.setText("k-means");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                k_means(evt);
            }
        });
        jMenu5.add(jMenuItem17);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Drawing");

        jMenuItem18.setText("Line drawing (DDA)");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Digital_differential_analizer(evt);
            }
        });
        jMenu6.add(jMenuItem18);

        jMenuItem19.setText("Circle (Midpoint (v. 1))");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Midpoint_circle(evt);
            }
        });
        jMenu6.add(jMenuItem19);

        jMenuItem20.setText("Anti-aliasing (Gupta-Sproull)");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Anti_aliasing_Gupta_Sproull(evt);
            }
        });
        jMenu6.add(jMenuItem20);

        jMenuItem21.setText("Drawing with pen");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Drawing_with_pen(evt);
            }
        });
        jMenu6.add(jMenuItem21);

        jMenuItem22.setText("Scaling lines");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scaling_lines(evt);
            }
        });
        jMenu6.add(jMenuItem22);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Clipping ");

        jMenuItem23.setText("Sutherland Hodgman (clipping polygons)");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sutherland_Hodgman(evt);
            }
        });
        jMenu7.add(jMenuItem23);

        jMenuBar1.add(jMenu7);

        jMenu10.setText("Filling");

        jMenuItem24.setText("Filling, Edge Table");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Filling_ET(evt);
            }
        });
        jMenu10.add(jMenuItem24);

        jMenuBar1.add(jMenu10);

        jMenu8.setText("3D drawing");

        jMenuItem25.setText("Triangular");
        jMenu8.add(jMenuItem25);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addGap(139, 139, 139))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jButton5))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))
                        .addGap(14, 14, 14)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(24, 24, 24)
                        .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Open_Click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Open_Click
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setPreferredSize(new Dimension(500, 400));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg", "bmp"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                if(jLabel1.getIcon() != null) jLabel1.setIcon(null);
                im = new image(file);
                jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
            } catch (IOException ex) {
                System.out.println("Problem accessing file"+file.getAbsolutePath());
            }
            } else {
                System.out.println("File access cancelled by user.");
            }
    }//GEN-LAST:event_Open_Click

    private void Save_Click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_Click
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setPreferredSize(new Dimension(500, 400));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg", "bmp"));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(java_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            BufferedImage img = (BufferedImage)((Image)((ImageIcon)jLabel1.getIcon()).getImage());
            
            try {
                ImageIO.write(img, "jpg", file);
            } catch (IOException ex) {
                Logger.getLogger(java_frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    
    }//GEN-LAST:event_Save_Click

    private void Average_filter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Average_filter
        im.average_filter();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));      
    }//GEN-LAST:event_Average_filter

    private void Gauss_filter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Gauss_filter
        im.gaussian_filter();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Gauss_filter

    private void Sharpenning_filter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sharpenning_filter
        im.sharpenning_filter();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Sharpenning_filter

    private void Brightness(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brightness
        String s = (String)JOptionPane.showInputDialog(
                    this, "Enter brightness value:\n", "Input brightness", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if("".equals(s)) {
            JOptionPane.showMessageDialog(new JFrame(), "You must enter the value!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            double brightness = Double.parseDouble(s);
            im.brightness(brightness);
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        }
    }//GEN-LAST:event_Brightness

    private void Contrast(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Contrast
        String s = (String)JOptionPane.showInputDialog(
                    this, "Enter contrast value:\n", "Input contrast", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if("".equals(s)) {
            JOptionPane.showMessageDialog(new JFrame(), "You must enter the value!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            double contrast = Double.parseDouble(s);
            im.contrast(contrast);
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        }
    }//GEN-LAST:event_Contrast

    private void Emboss_filter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Emboss_filter
        im.emboss_filter();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));// TODO add your handling code here:
    }//GEN-LAST:event_Emboss_filter

    private void Table_size_chooser(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Table_size_chooser
        int height = Integer.parseInt(jTextField3.getText());
        int width = Integer.parseInt(jTextField6.getText());
        
        for(int i = 0; i < jTable1.getColumnCount(); i++){
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(20);
        }
        
        jTable1.setRowHeight(20);
        
        DefaultTableModel model = new DefaultTableModel(height, width);   
        jTable1.setModel(model);
    }//GEN-LAST:event_Table_size_chooser

    private void Custom_filter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Custom_filter
        int height = jTable1.getRowCount();
        int width = jTable1.getColumnCount();
        double divisor = height*width;
        double offset = 0;
        int center_row_number = (int)Math.round(height/2);
        int center_column_number = (int)Math.round(width/2);
         
        //TableModel model = jTable2.getModel();
        //System.out.println("mask value " + jTable1.getValueAt(0, 0));
        
        int[][] mask = new int[height][width];
        for(int i = 0; i < height; i++){
            for(int j = 0; j < width; j++){
                mask[i][j] = Integer.parseInt(jTable1.getValueAt(i, j).toString());
            }
        }
        
        if(isDouble(jTextField4.getText())){
            divisor = Double.valueOf(jTextField4.getText());
        }
        if(isDouble(jTextField5.getText())){
            offset = Double.valueOf(jTextField5.getText());
        }

        if(isInteger(jTextField7.getText())){
            center_row_number = Integer.parseInt(jTextField7.getText());
        }
        if(isInteger(jTextField8.getText())){
            center_column_number = Integer.parseInt(jTextField8.getText());
        }

        im.custom_filter(mask, divisor, offset, center_row_number, center_column_number);
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Custom_filter

    private void Display_kernels(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Display_kernels
        int[][] kernel = new int[3][3];
        for(int i = 0; i < jTable1.getColumnCount(); i++){
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(20);
        }
        
        jTable1.setRowHeight(20);
        
        DefaultTableModel model = new DefaultTableModel(3, 3);   
        jTable1.setModel(model);
        switch(jComboBox1.getSelectedItem().toString()){
            case "Average (blur) filter":
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                         jTable1.setValueAt(im.av_mask[i][j], i, j);
                    }
                }   
                //jTextArea1.setText("Average filter info\n Divisor: " + im.av_divisor +"\n Offset: " + im.av_offset + "\n Size of kernel: 3");
                break;
            case "Gaussian filter":
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                          jTable1.setValueAt(im.gauss_mask[i][j], i, j);
                    }
                }   
                //jTextArea1.setText("Gaussian filter info\n Divisor: " + im.gauss_divisor +"\n Offset: " + im.gauss_offset + "\n Size of kernel: 3");
                break;
            case "Sharpening filter":
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                          jTable1.setValueAt(im.sharp_mask[i][j], i, j);
                    }
                }   
                //jTextArea1.setText("Sharpenning filter info\n Divisor: " + im.sharp_divisor +"\n Offset: " + im.sharp_offset + "\n Size of kernel: 3");
                break;
            case "Emboss filter":
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                          jTable1.setValueAt(im.emboss_mask[i][j], i, j);
                    }
                }   
                //jTextArea1.setText("Emboss filter info\n Divisor: " + im.emboss_divisor +"\n Offset: " + im.emboss_offset + "\n Size of kernel: 3");
                break;
            case "Edge detection":
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                          jTable1.setValueAt(im.edge_mask[i][j], i, j);
                    }
                }   
                //jTextArea1.setText("Edge detection filter info\n Divisor: " + im.edge_divisor +"\n Offset: " + im.edge_offset + "\n Size of kernel: 3");
                break;
            default:
                kernel = new int[3][3];
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                        kernel[i][j] = 0;
                    }
                }
                break;   
        }
    }//GEN-LAST:event_Display_kernels

    private void Edge_detection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edge_detection
        im.edge_detection_filter();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));// TODO add your handling code here:
    }//GEN-LAST:event_Edge_detection

    private void Negation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Negation
        im.negation();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Negation

    private void Grayscale(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Grayscale
        im.grayscale();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Grayscale

    private void Average_thresholding(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Average_thresholding
        im.grayscale();
        JFrame g = new grayscale(im);
        g.setVisible(true);
        im.average_threshold();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));        // TODO add your handling code here:
    }//GEN-LAST:event_Average_thresholding

    private void Random_thresholding(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Random_thresholding
        im.grayscale();
        JFrame g = new grayscale(im);
        g.setVisible(true);
        
        int k = 2;
        String s = (String)JOptionPane.showInputDialog(
            this, "Enter k-value for random dithering:\n", "Input k", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if(!"".equals(s)) {
              k = Integer.parseInt(s);
        } 
        
        im.random_threshold(k);
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));       // TODO add your handling code here:
    }//GEN-LAST:event_Random_thresholding

    private void Ordered_thresholding(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ordered_thresholding
        im.grayscale();
        JFrame g = new grayscale(im);
        g.setVisible(true);
        
        int k = 2;
        String s = (String)JOptionPane.showInputDialog(
            this, "Enter k-value for ordered dithering:\n", "Input k", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if(!"".equals(s)) {
              k = Integer.parseInt(s);
        } 
        
        int n = 2;
        String t = (String)JOptionPane.showInputDialog(
            this, "Enter n-value for ordered dithering:\n", "Input n", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if(!"".equals(t)) {
              n = Integer.parseInt(t);
        } 
        
        im.ordered_threshold(k, n);
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));  // TODO add your handling code here:
    }//GEN-LAST:event_Ordered_thresholding

    private void k_means(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_k_means
        String s = (String)JOptionPane.showInputDialog(
            this, "Enter size of palette for k-means quantiation:\n", "Input k", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if("".equals(s)) {
            JOptionPane.showMessageDialog(new JFrame(), "You must enter the value!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int k = Integer.parseInt(s);
            im.k_means(k);
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        }
    }//GEN-LAST:event_k_means

    private void uniform_quantization(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniform_quantization
        String r = (String)JOptionPane.showInputDialog(
            this, "Enter size of red palette for uniforn quantiation:\n", "Input k", JOptionPane.PLAIN_MESSAGE, null, null, "");
        String g = (String)JOptionPane.showInputDialog(
            this, "Enter size of green palette for uniforn quantiation:\n", "Input k", JOptionPane.PLAIN_MESSAGE, null, null, "");
        String b = (String)JOptionPane.showInputDialog(
            this, "Enter size of blue palette for uniforn quantiation:\n", "Input k", JOptionPane.PLAIN_MESSAGE, null, null, "");

        if("".equals(r) || "".equals(g) || "".equals(b)) {
            JOptionPane.showMessageDialog(this, "You must enter the value!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int k_R = Integer.parseInt(r);
            int k_G = Integer.parseInt(g);
            int k_B = Integer.parseInt(b);
            im.uniform_quantization(k_R, k_G, k_B);
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        }
    }//GEN-LAST:event_uniform_quantization

    private void Gamma_correction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Gamma_correction
        String s = (String)JOptionPane.showInputDialog(
            this, "Enter gamma value:\n", "Input gamma", JOptionPane.PLAIN_MESSAGE, null, null, "");
        if("".equals(s)) {
            JOptionPane.showMessageDialog(this, "You must enter the value!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            double gamma = Double.parseDouble(s);
            im.gamma_correction(gamma);
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        }
    }//GEN-LAST:event_Gamma_correction

    private void Digital_differential_analizer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Digital_differential_analizer
        draw = Drawing.LINE;
        
        line_start = null;
        line_end = null;
        line_clicked = false;
        
        center = null;
        circle_clicked = false;
    }//GEN-LAST:event_Digital_differential_analizer

    private void Image_clicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_clicked
        switch(draw){
            case LINE:
                //Starting point
                if(line_clicked == false){
                    line_start = new Point(evt.getX(), evt.getY());
                    line_clicked = true;
                //Ending point and drawing line
                } else {
                    line_end = new Point(evt.getX(), evt.getY());
                    line_clicked = false;
                    im.draw_line_DDA(line_start, line_end, 0, 0, 0);
                    //System.out.println("Start: " + line_start.toString() + " End: " + line_end.toString());
                    //Set ends to initial values
                    line_start = null;
                    line_end = null;
                    jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
                }              
                break;
            case CIRCLE:
                //Center
                if(circle_clicked == false){
                    center = new Point(evt.getX(), evt.getY());
                    circle_clicked = true;
                //Radius
                } else {
                    int radius = (int) Math.sqrt(Math.pow(evt.getX() - center.x, 2) + Math.pow(evt.getY() - center.y, 2));
                    if(radius < Math.min(center.x, center.y) && radius < Math.min(jLabel1.getWidth() - center.x, jLabel1.getHeight() - center.y)){
                        circle_clicked = false;
                        im.draw_midpoint_circle(center, radius);
                        center = null;
                        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
                    } else {
                        JOptionPane.showMessageDialog(this, "Radius is outside of the image!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }                
                break;
            case AA:
                //Starting point
                if(line_clicked == false){
                    line_start = new Point(evt.getX(), evt.getY());
                    line_clicked = true;
                //Ending point and drawing line
                } else {
                    line_end = new Point(evt.getX(), evt.getY());
                    line_clicked = false;
                    im.AA_Gupta_Sproull(line_start, line_end, thickness);
                    System.out.println("Start: " + line_start.toString() + " End: " + line_end.toString());
                    //Set ends to initial values
                    line_start = null;
                    line_end = null;
                    jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
                }              
                break;
            case PEN:
                //Starting point
                if(line_clicked == false){
                    line_start = new Point(evt.getX(), evt.getY());
                    line_clicked = true;
                //Ending point and drawing line
                } else {
                    line_end = new Point(evt.getX(), evt.getY());
                    line_clicked = false;
                    im.thick_lines_pen(line_start, line_end, thickness);
                    System.out.println("Start: " + line_start.toString() + " End: " + line_end.toString());
                    //Set ends to initial values
                    line_start = null;
                    line_end = null;
                    jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
                }              
                break;
            case SCALING:
                //Starting point
                if(line_clicked == false){
                    line_start = new Point(evt.getX(), evt.getY());
                    line_clicked = true;
                //Ending point and drawing line
                } else {
                    line_end = new Point(evt.getX(), evt.getY());
                    line_clicked = false;
                    image virt_image = new image(2 * im.w, 2 * im.h);
                    Point virt_start = new Point(2 * line_start.x, 2 * line_start.y);
                    Point virt_end = new Point(2 * line_end.x, 2 * line_end.y);

                    //Drawing line
                    virt_image.thick_lines_pen(virt_start, virt_end, thickness * 2);
                    im.scaling_lines(line_start, line_end, thickness, virt_image);
                    //System.out.println("Start: " + line_start.toString() + " End: " + line_end.toString());
                    //Set ends to initial values
                    line_start = null;
                    line_end = null;
                    jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
                }              
                break;
            case CLIPPING:                               
                if(chosen == false){                    
                    //Choosing rectangular
                    //JOptionPane.showMessageDialog(this, "Choose edges for clipping rectangular!\n");
                    if(edge_clicked == false){
                        rect_start = new Point(evt.getX(),  evt.getY());
                        edge_clicked = true;
                    } else {
                        rect_end = new Point(evt.getX(),  evt.getY());

                        System.out.println("Start: " + rect_start.toString() + " End: " + rect_end.toString());
                        
                        //Drawing rectangular
                        edges[0] = rect_start;
                        edges[1] = new Point(rect_start.x, rect_end.y);
                        edges[2] = rect_end;
                        edges[3] = new Point(rect_end.x, rect_start.y);

                        im.draw_line_DDA(edges[0], edges[1], 0, 0, 0);
                        im.draw_line_DDA(edges[1], edges[2], 0, 0, 0);
                        im.draw_line_DDA(edges[2], edges[3], 0, 0, 0);
                        im.draw_line_DDA(edges[3], edges[0], 0, 0, 0);
                        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
                        
                        edge_clicked = false;
                        chosen = true;
                    }
                } else {
                    //Choosing polygon
                    in_poly.add(new Point(evt.getX(),  evt.getY()));
                }
            case FILLING:
                fill_poly.add(new Point(evt.getX(),  evt.getY()));            
        }

        //Graphics g = this.getGraphics();
        //if(line_start!=null && line_end!=null) g.drawLine(line_start.x, line_start.y, line_end.x, line_end.y);
    }//GEN-LAST:event_Image_clicked

    private void Clean(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clean
        im.Clean();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Clean

    private void Midpoint_circle(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Midpoint_circle
        draw = Drawing.CIRCLE;
        
        line_start = null;
        line_end = null;
        line_clicked = false;
    }//GEN-LAST:event_Midpoint_circle

    private void Anti_aliasing_Gupta_Sproull(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Anti_aliasing_Gupta_Sproull
        draw = Drawing.AA;
        
        line_start = null;
        line_end = null;
        line_clicked = false;
        
        center = null;
        circle_clicked = false;
        
        String s = (String)JOptionPane.showInputDialog(
                        this, "Enter thickness value:\n", "Input thickness", JOptionPane.PLAIN_MESSAGE, null, null, "");
        thickness = Integer.parseInt(s);
        
    }//GEN-LAST:event_Anti_aliasing_Gupta_Sproull

    private void Drawing_with_pen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Drawing_with_pen
        draw = Drawing.PEN;
        
        line_start = null;
        line_end = null;
        line_clicked = false;
        
        center = null;
        circle_clicked = false;
        
        String s = (String)JOptionPane.showInputDialog(
                        this, "Enter thickness value:\n", "Input thickness", JOptionPane.PLAIN_MESSAGE, null, null, "");
        thickness = Integer.parseInt(s);
        
    }//GEN-LAST:event_Drawing_with_pen

    private void Scaling_lines(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scaling_lines
        draw = Drawing.SCALING;
        
        line_start = null;
        line_end = null;
        line_clicked = false;
        
        center = null;
        circle_clicked = false;
        
        String s = (String)JOptionPane.showInputDialog(
                        this, "Enter thickness value:\n", "Input thickness", JOptionPane.PLAIN_MESSAGE, null, null, "");
        thickness = Integer.parseInt(s);
    }//GEN-LAST:event_Scaling_lines

    private void Sutherland_Hodgman(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sutherland_Hodgman
        if(drawing_mode == false){
            draw = Drawing.CLIPPING;
        
            in_poly = new ArrayList<>();
            rect_start = null;
            rect_end = null;
            
            line_start = null;
            line_end = null;
            line_clicked = false;

            center = null;
            circle_clicked = false;
            
            drawing_mode = true;
        } else {
            drawing_mode = false;
            chosen = false;
            for(int i = 0; i < in_poly.size(); i++){
                int j;
                if(i != in_poly.size() - 1) j = i + 1;
                else j = 0;
                im.draw_line_DDA(in_poly.get(i), in_poly.get(j), 0, 0, 0);
            }
             jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
            ArrayList<Point> out_poly = im.clipping_sh(in_poly, edges);
            
            System.out.println(out_poly.size());
            //Drawing clipped polygon
            for(int i = 0 ; i < out_poly.size(); i++){
                int j;
                if(i != out_poly.size() - 1) j = i + 1;
                else j = 0;
                im.draw_line_DDA(out_poly.get(i), out_poly.get(j), 255, 0, 0);                
            }
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        }
        
        
    }//GEN-LAST:event_Sutherland_Hodgman

    private void Filling_ET(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Filling_ET
       if(filling_mode == false){
            draw = Drawing.FILLING;
        
            fill_poly = new ArrayList<>();
            rect_start = null;
            rect_end = null;
            
            line_start = null;
            line_end = null;
            line_clicked = false;

            center = null;
            circle_clicked = false;
            
            filling_mode = true;
        } else {                        
            im.filling_et(fill_poly, 255, 255, 0);
            
            for(int i = 0 ; i < fill_poly.size(); i++){
                int j;
                if(i != fill_poly.size() - 1) j = i + 1;
                else j = 0;
                im.draw_line_DDA(fill_poly.get(i), fill_poly.get(j), 0, 0, 0);                
            }
            
            jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
            filling_mode = false;
       }
    }//GEN-LAST:event_Filling_ET


    
    public static boolean isInteger(String str) {
        if (str == null) {
            return false;
        }
        int length = str.length();
        if (length == 0) {
            return false;
        }
        int i = 0;
        if (str.charAt(0) == '-') {
            if (length == 1) {
                return false;
            }
            i = 1;
        }
        for (; i < length; i++) {
            char c = str.charAt(i);
            if (c < '0' || c > '9') {
                return false;
            }
        }
        return true;
    }
        
    public boolean isDouble( String str ){
        /**/        try{
          Double.parseDouble( str );
          return true;
        }
        catch( NumberFormatException e ){
          return false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(java_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(java_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(java_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(java_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new java_frame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    public javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private java.awt.ScrollPane scrollPane1;
    // End of variables declaration//GEN-END:variables
}
